<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ParaofHeaven</title>
    <link>https://paraofheaven.github.io/post/</link>
    <description>Recent content in Posts on ParaofHeaven</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sat, 02 Sep 2017 22:31:29 +0800</lastBuildDate>
    
	<atom:link href="https://paraofheaven.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从员工的角度看管理</title>
      <link>https://paraofheaven.github.io/post/%E4%BB%8E%E5%91%98%E5%B7%A5%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%AE%A1%E7%90%86-%E8%AF%BB%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE/</link>
      <pubDate>Sat, 02 Sep 2017 22:31:29 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E4%BB%8E%E5%91%98%E5%B7%A5%E7%9A%84%E8%A7%92%E5%BA%A6%E7%9C%8B%E7%AE%A1%E7%90%86-%E8%AF%BB%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE/</guid>
      <description>&lt;h2 id=&#34;从员工的角度看管理&#34;&gt;从员工的角度看管理&lt;/h2&gt;

&lt;h3 id=&#34;读-格鲁夫给经理人的第一课&#34;&gt;读《格鲁夫给经理人的第一课》&lt;/h3&gt;

&lt;h3 id=&#34;工作的规划&#34;&gt;工作的规划&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在你规划行动之前，一定记得先问自己：有什么事情如果我”今天“做了，可以让“明天”更好，或者至少让“明天”不会更糟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;事实上，我在工作前两年对工作和生活都没有过一个上心的规划。很多时候是顺应环境的变化而变化，比如在途牛，很多时间都需要加班，但是我很少去思考为什么我的工作需要加班，除了特定的上线点无法规避之外，我能不能通过自己发声去改变任务量不均衡（任务量多的时候很多，少的时候又很少）的情况，能不能尽量参与到任务量的分配过程中，而避免很多被动的情况，很可惜我没有做到，后来到了笛风，也是通过规范化的任务评定流程来减轻了工作上的压力。这是非常值得我去思考的地方，如何规划日常的工作和生活？&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>vscode调试实例介绍</title>
      <link>https://paraofheaven.github.io/post/vscode%E8%B0%83%E8%AF%95%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 31 Aug 2017 16:48:42 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/vscode%E8%B0%83%E8%AF%95%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;In company on 2017-08-31 by para&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/home/home-screenshot-mac.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言:&lt;/h3&gt;

&lt;p&gt;前段时间，我做了一个很重要的决定，离职了并加入了一个新的团队，一切都像从新开始一样。但是一些工作的习惯还是需要我做出一些调整的地方。这其中有个很重要的变化，开发工具需要从webstorm变成vscode了，这倒不是老大强制要求的，但是，我认为遵循一些团队性的规范和约定，能够避免很多浪费时间的useless work(浪费时间而且解决了也不会提高技术性的work，比如java中的环境变量的配置)。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Start a Hugo Blog In BlackBurn Style</title>
      <link>https://paraofheaven.github.io/post/spf13-vim-3-0-release-and-new-website/</link>
      <pubDate>Thu, 24 Aug 2017 16:54:37 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/spf13-vim-3-0-release-and-new-website/</guid>
      <description>Blackburn Blackburn is a clear and responsive theme for Hugo.
Overview  Based on Yahoo&amp;rsquo;s Pure CSS (v1.0.0) Fixed sidebar with social links:  Twitter GNU social Facebook Google+ Weibo Tumblr Instagram Flickr 500px Pinterest YouTube Vimeo Vine SlideShare LinkedIn Xing Reddit Hacker News GitHub GitLab Bitbucket Stack Overflow Server Fault Steam MobyGames Last.fm Discogs Keybase  Client-side syntax highlighting by Highlight.js (v9.12.0) Web analytics by Google Analytics Comments by Disqus Icons by Font Awesome (v4.</description>
    </item>
    
    <item>
      <title>Immutable 详解及React中实践</title>
      <link>https://paraofheaven.github.io/post/immutable%E8%AF%A6%E8%A7%A3%E5%8F%8Areact%E4%B8%AD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 08 Dec 2016 21:03:06 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/immutable%E8%AF%A6%E8%A7%A3%E5%8F%8Areact%E4%B8%AD%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;In parahome on 2016-12-08 by para&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Shared mutable state is the root of all evil(共享的可变状态是万恶之源)
&amp;ndash;Pete Hunt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有人说 Immutable 可以给 React 应用带来数十倍的提升，也有人说 Immutable 的引入是近期 JavaScript 中伟大的发明，因为同期 React 太火，它的光芒被掩盖了。这些至少说明 Immutable 是很有价值的，下面我们来一探究竟。&lt;/p&gt;

&lt;p&gt;JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如
&lt;code&gt;foo ={a:1};bar =foo;bar.a=2&lt;/code&gt; ，你会发现此时&lt;code&gt;foo.a&lt;/code&gt;也被改成了&lt;code&gt;2&lt;/code&gt;。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用shallowCopy(浅拷贝)或deepCopy(深拷贝)来避免被修改，但这样做造成了CPU和内存的浪费。&lt;/p&gt;

&lt;p&gt;Immutable 可以很好地解决这些问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Design Pattern Discuss</title>
      <link>https://paraofheaven.github.io/post/react_desig_pattern_discuss/</link>
      <pubDate>Fri, 11 Nov 2016 21:37:36 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/react_desig_pattern_discuss/</guid>
      <description>&lt;p&gt;In parahome on 2016-11-11 by para&lt;/p&gt;

&lt;h4 id=&#34;transformation&#34;&gt;transformation&lt;/h4&gt;

&lt;p&gt;The core premise for React is that UIs are simply a projection of data into a different form of data. The same input gives the same output. A simple &lt;code&gt;pure function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>State数据格式设计中的思考</title>
      <link>https://paraofheaven.github.io/post/state%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 02 Nov 2016 19:20:10 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/state%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;In parahome on 2016-11-02 by para&lt;/p&gt;

&lt;h4 id=&#34;前言&#34;&gt;前言&lt;/h4&gt;

&lt;p&gt;Redux中，State是整个应用的数据，本质上是一个普通对象。&lt;/p&gt;

&lt;p&gt;State决定了整个应用的组件如何渲染，渲染的结果是什么。可以说，State是应用的灵魂，组件是应用的肉体。&lt;/p&gt;

&lt;p&gt;所以，在项目开发初期，设计一份健壮灵活的State尤其重要，对后续的开发有很大的帮助。（请注意，并不强制要求所有的数据都保存到State中，有些属于组件的数据是完全可以留给组件自身去维护的。）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React文档中没提到的事</title>
      <link>https://paraofheaven.github.io/post/react%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B2%A1%E6%8F%90%E5%88%B0%E7%9A%84%E4%BA%8B/</link>
      <pubDate>Thu, 20 Oct 2016 21:02:45 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/react%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B2%A1%E6%8F%90%E5%88%B0%E7%9A%84%E4%BA%8B/</guid>
      <description>&lt;p&gt;In parahome on 2016-10-20 by para&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对很多 react 新手来说，网上能找到的资源大都是些简单的 tutorial ，React文档也是非常值得一读的，英文版的有着非常详细的介绍。它们能教会你如何使用 react ，但并不会告诉你怎么在实际项目中优雅的组织和编写 react 代码。用谷歌搜中文“ React 最佳实践”发现前两页几乎全都是同一篇国外文章的译文&amp;hellip;所以我总结了下自己过去那个项目使用 React 踩过的一些坑，也整理了一些别人的观点，希望对部分 react 使用者有帮助。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>笛风新平台前端JavaScript编码规范起草</title>
      <link>https://paraofheaven.github.io/post/%E7%AC%9B%E9%A3%8E%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%89%8D%E7%AB%AFjavascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E8%B5%B7%E8%8D%89/</link>
      <pubDate>Wed, 24 Aug 2016 15:44:02 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E7%AC%9B%E9%A3%8E%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%89%8D%E7%AB%AFjavascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E8%B5%B7%E8%8D%89/</guid>
      <description>&lt;h4 id=&#34;编码规范&#34;&gt;编码规范&lt;/h4&gt;

&lt;p&gt;在团队协作过程中，编码规范的作用想必不用多说，本文主要介绍如何选择及相应的辅助工具，最大程度上保证代码质量。&lt;/p&gt;

&lt;h5 id=&#34;选择标准&#34;&gt;选择标准&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;认可度高，该规范现在已经或者即将成为国际 JavaScript 标准了&lt;/li&gt;
&lt;li&gt;支持项目的技术选型&lt;/li&gt;
&lt;li&gt;完备的插件支持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript语法解析与抽象语法树</title>
      <link>https://paraofheaven.github.io/post/javascript%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</link>
      <pubDate>Fri, 20 May 2016 20:39:57 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/javascript%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</guid>
      <description>&lt;p&gt;In parahome on 2016-05-20 by para&lt;/p&gt;

&lt;p&gt;抽象语法树（Abstract Syntax Tree）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上。&lt;/p&gt;

&lt;h2 id=&#34;什么是语法树&#34;&gt;什么是语法树&lt;/h2&gt;

&lt;p&gt;可以通过一个简单的例子来看语法树具体长什么样子。有如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var AST = &amp;quot;is Tree&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript中的new关键字</title>
      <link>https://paraofheaven.github.io/post/javascript%E4%B8%AD%E7%9A%84new%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Thu, 06 Aug 2015 21:41:42 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/javascript%E4%B8%AD%E7%9A%84new%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>&lt;p&gt;In parahome on 2015-08-06 by para&lt;/p&gt;

&lt;p&gt;Javascript中，实例化一个对象，会用到new关键字。&lt;/p&gt;

&lt;p&gt;经常有人会问我，对于一个函数，什么时候该使用new关键字。&lt;/p&gt;

&lt;p&gt;在回答这个问题之前，需要先了解清楚new的本质，在调用new Function的时候，new做了什么操作。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于网页缓存的一些实践[翻译]</title>
      <link>https://paraofheaven.github.io/post/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 19 May 2015 22:18:09 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;In parahome on 2015-05-19 by para&lt;/p&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言：&lt;/h3&gt;

&lt;p&gt;在8年之前，Yahoo团队曾经对网页中的缓存做了比较详尽的研究，但是随着互联网的高速发展，研究数据发生了一些变化。这篇文章主要是Facebook的web团队对现在缓存情况一些数据收集和研究。包括PC和移动端资源被缓存的时间以及资源在存在的时间。网页缓存是性能优化很重要的因素，值得一读。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用模块化编程库和闭包</title>
      <link>https://paraofheaven.github.io/post/%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E5%BA%93%E5%92%8C%E9%97%AD%E5%8C%85/</link>
      <pubDate>Sat, 11 Apr 2015 22:20:45 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E5%BA%93%E5%92%8C%E9%97%AD%E5%8C%85/</guid>
      <description>&lt;p&gt;In parahome on 2015-04-11 by para&lt;/p&gt;

&lt;p&gt;1 问题及方案&lt;/p&gt;

&lt;p&gt;后台js代码规范度不好，怎么写的都有，不易维护、复用度低，我们不期全部使用backbone做到前端MVC，但使用模块化编程库做到模块化开发还是简单而有意义的。&lt;/p&gt;

&lt;p&gt;2 为什么要模块化&lt;/p&gt;

&lt;p&gt;时至今日，把脚本放在页面的底部，已不再是最佳的解决方案，甚至事与愿违，转化为性能的毒药。出于种种的原因，我们几乎从不直接在页面上插入js脚本，而是使用第三方的加载器，比如seajs或者requirejs。加载模块的概念，如果你是后端开发工程师，更不会陌生。Java、Python、C# 等等语言，都有&lt;strong&gt;include&lt;/strong&gt;、&lt;strong&gt;import&lt;/strong&gt;等功能。JavaScript 语言本身也有类似功能，但目前还处于草案阶段，需要等到ES6 标准得到主流浏览器支持后才能使用。 模块化编程是十分便捷的工程管理工具，简化了代码的结构，让文件的功能变得单一易维护复用度高。更重要的是管理了文件依赖和消除了命名冲突问题，并利用 AMD / CMD 规范统一了格式。如果工具提供了异步加载，还可以避免页面停止渲染被js阻塞。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>