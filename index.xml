<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ParaofHeaven</title>
    <link>https://paraofheaven.github.io/</link>
    <description>Recent content on ParaofHeaven</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>&amp;copy; 2017. All rights reserved.</copyright>
    <lastBuildDate>Sat, 02 Sep 2017 22:31:29 +0800</lastBuildDate>
    
	<atom:link href="https://paraofheaven.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>从员工的角度看管理</title>
      <link>https://paraofheaven.github.io/shot/%E4%BB%8E%E5%91%98%E5%B7%A5%E7%9A%84%E8%A7%92%E5%BA%A6%E5%BC%80%E7%AE%A1%E7%90%86-%E8%AF%BB%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE/</link>
      <pubDate>Sat, 02 Sep 2017 22:31:29 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/shot/%E4%BB%8E%E5%91%98%E5%B7%A5%E7%9A%84%E8%A7%92%E5%BA%A6%E5%BC%80%E7%AE%A1%E7%90%86-%E8%AF%BB%E6%A0%BC%E9%B2%81%E5%A4%AB%E7%BB%99%E7%BB%8F%E7%90%86%E4%BA%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E8%AF%BE/</guid>
      <description>从员工的角度看管理 读《格鲁夫给经理人的第一课》 工作的规划  在你规划行动之前，一定记得先问自己：有什么事情如果我”今天“做了，可以让“明天”更好，或者至少让“明天”不会更糟。
 事实上，我在工作前两年对工作和生活都没有过一个上心的规划。很多时候是顺应环境的变化而变化，比如在途牛，很多时间都需要加班，但是我很少去思考为什么我的工作需要加班，除了特定的上线点无法规避之外，我能不能通过自己发声去改变任务量不均衡（任务量多的时候很多，少的时候又很少）的情况，能不能尽量参与到任务量的分配过程中，而避免很多被动的情况，很可惜我没有做到，后来到了笛风，也是通过规范化的任务评定流程来减轻了工作上的压力。这是非常值得我去思考的地方，如何规划日常的工作和生活？
现在我逐渐开始摸索任务的细分，我首先做的工作是“番茄工作法”，它的意思是将一日工作的8到10个小时分隔成25分钟的小段，依次去执行。通常我们会选择将主要的工作留在下午去做，因为上午通常精神比较困而且需要处理昨日留下来的杂事，因此我通常会选择上午一个小时和下午的4到5个小时来分隔我每日的工作任务。
举个简单的例子，比如我这个月的规划有：
 完成既定的工作，即公司安排的工作量 学习公司内部的组件和框架 学习一些额外的技术，拓展知识面，并且写一写小项目来熟悉  这么看来，第一，首先公司安排的工作量是必须要完成的，但这其中通常包括任务评定的时间和配合测试的时间（即掐头去尾），这个时间是碎片式的，我应该怎么样去利用？
第二，学习内部组件的任务的优先级是要高于学习其他技术的，如同格鲁夫在第一章制作面包的流程中所谈的那样，我们首先需要找出流程的关键任务，并尝试去优化它。我主要的任务是公司分配的工作量，学习内部的组件和框架将大大提升我对工作内容和项目的认知，缩短我接下来的开发时间，同时在学习的过程中避免踩入某些坑中（因为组件内一些比较明显的坑开发者通常会在源码中的README中提到），但是，学习组件也是一个过程，我应该怎样去安排它？
第三，学习额外的知识是非常有必要的，尽管它可能是我目前的工作上所不需要的知识。我们通常会把学习比作攀峰，然而两者也是比较相似的，我们不可能一步从山脚跨到山顶，
 这里有一个笑话：有人问，如何看待白银市公安局换了局长，就破了连环杀人案？有人调侃说，今天早上我吃第三个包子才觉得饱，早知道我就不吃第二个包子了。
 知识和技能的进阶也是循序渐进的，两年前，我还不知道ajax，git和node,一年前，我还不知道webpack，gulp和linux shell，现在，我还有很多很多模糊的知识点和技能需要去学习和实践，很多知识也不是刻意去学习，日常的工作中遇到了就会去接触一下，一般来说，只要走在一个方向明确的路上，可供拓展和学习的方面也就越丰富。比如我记得我在不久前，遇到了一个关于[深拷贝浅拷贝的问题]()，深究起来,发现其中涉及到了相等的概念定义，js的类型转化，深浅拷贝的区别，各框架的实现，关键字的真值转化等等方方面面的知识，任何一个知识点又可以拓展出新的知识面，所以额外的学习是绝对不可缺少的。问题也产生了，如何平衡主次任务之前的关系？
我们先从我的一份日常任务安排表开始说起：
每周任务： 主任务： 1 提钱游新手指南（0901提测） 2 修改手机号流程（0907提测） 3 实名验证（已提测）
学习任务： 1 Grunt项目发布流程 2 validate验证组件的实现
额外学习: 1 学习iScroll的源码 2 linux命令行的学习
我们从下往上看，首先，我为什么需要学习iScroll的源码，因为有人提到过iScroll和lodash的源码（或者underscore）都是值得一读的，不仅可能学习到框架开发的逻辑，还可以借此学习代码的规划化。最重要的一点是，我现在开发的移动端项目必不可少的组件就是基于iScoll开发的，学习它有益无害。
其次是linux命令行的学习，这是源于我在写构建化工具的时候，通常会发现底层还是linux命令实现的，我基于这个兴趣，毅然要入门去看看它到底有多强大。
本周的学习任务是hybrid项目发布流程和validate验证组件的实现。这两个就比较接近于我日常的开发项目了，现在公司内部还是有不少的项目使用hybrid开发，grunt构建的开发方式，由于我对grunt不是很熟悉，目前也没有大量的时间可供我去深入学习，所以我退而求其次，只大概学习其基本的开发流程，本地开发，构建，打包，发布和ftp上传，所以发布流程我只需要花点时间简单掌握就行。其次是validate的验证组件的实现，这个是因为我目前在开发中的一个项目需要大量使用到这个组件，而且这个组件的使用也涉及到很多Angualr指令的定义，简单来说是比较复杂，因此我会选择花大部分的额外时间在这个组件的研究上面，最好是能够在使用上做些优化的工作。
最后是本周的主要任务，也是公司分配的任务量，首先在此之前我已经对工作量进行了评估，除去已提测需要配合测试的任务，第一个任务，主要的工作在静态页面和UI上，因此找设计师尽早给到切图和标注是重点（找出关键点），然后找到产品拿到所需文本和链接，基本任务就能完成了。评估大概需要一天半的时间。第二个任务花费时间会比较长，因为是流程性的工程，我首先列举出几个可能开发的难点：
 任务流程是否准确，功能是否全部覆盖 手持身份证扫描功能（后确定是图片上传，那就确定为hybrid引用本地图片上传功能） 相关说明文本和链接 接口格式的定义  这其中除了第二个需要我自己找相关代码研究，其他都需要找其他人配合沟通（产品，测试，UI），所以我先将问题列表列出来，依次和相关人员沟通定方案，或者在他们沟通，不需要我参与的时间，去研究相关代码，搭起项目框架，最后我预估工作量大概是5天，静态页面2-3天，接口定义和联调至少也需要2到3天。
接下来就是分隔每段时间，把工作量细分到每一小块任务的事了。比如，首页我首先需要画页面，定义哪些是展示的常量，哪些是作为Flag的变量，这种工作通常是大脑考虑一下，简单细分的事，我也不会记著笔端。</description>
    </item>
    
    <item>
      <title>vscode调试</title>
      <link>https://paraofheaven.github.io/post/vscode%E8%B0%83%E8%AF%95%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 31 Aug 2017 16:48:42 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/vscode%E8%B0%83%E8%AF%95%E5%AE%9E%E4%BE%8B%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;In company on 2017-08-31 by para&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/home/home-screenshot-mac.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言:&lt;/h3&gt;

&lt;p&gt;前段时间，我做了一个很重要的决定，离职了并加入了一个新的团队，一切都像从新开始一样。但是一些工作的习惯还是需要我做出一些调整的地方。这其中有个很重要的变化，开发工具需要从webstorm变成vscode了，这倒不是老大强制要求的，但是，我认为遵循一些团队性的规范和约定，能够避免很多浪费时间的useless bug(浪费时间而且解决了也不会提高技术性的bug，比如java中的环境变量的配置)。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>外滩的第四次之旅</title>
      <link>https://paraofheaven.github.io/shot/%E5%A4%96%E6%BB%A9%E7%9A%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B9%8B%E6%97%85/</link>
      <pubDate>Sun, 27 Aug 2017 23:00:54 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/shot/%E5%A4%96%E6%BB%A9%E7%9A%84%E7%AC%AC%E5%9B%9B%E6%AC%A1%E4%B9%8B%E6%97%85/</guid>
      <description>外滩下的草坪，空气很好，天空很蓝&amp;hellip; 邂逅一场跨国求婚，强行吃一嘴狗粮&amp;hellip; 树后掩映着的大楼，全是金融机构&amp;hellip; 外滩的海关大楼，上海的钟楼，哈哈&amp;hellip; 入夜时的外滩夜景啦，震旦大厦真是个打广告的好地方啊&amp;hellip; 千呼万唤始出来的明珠塔灯光夜色，竟没有一点糜奢之感&amp;hellip; 回来路上逛了新世界大厦，感受一把，穷&amp;hellip; 事实证明出去走走还是好的，可以给自己独立出一点空间胡思乱想，比闷在家里打游戏事后又觉得空虚强多了。</description>
    </item>
    
    <item>
      <title>Shot</title>
      <link>https://paraofheaven.github.io/shot/</link>
      <pubDate>Fri, 25 Aug 2017 10:58:03 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/shot/</guid>
      <description>[旅行]  外滩的第四次之旅</description>
    </item>
    
    <item>
      <title>Start a Hugo Blog In BlackBurn Feeling</title>
      <link>https://paraofheaven.github.io/post/spf13-vim-3-0-release-and-new-website/</link>
      <pubDate>Thu, 24 Aug 2017 16:54:37 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/spf13-vim-3-0-release-and-new-website/</guid>
      <description>Blackburn Blackburn is a clear and responsive theme for Hugo.
Overview  Based on Yahoo&amp;rsquo;s Pure CSS (v1.0.0) Fixed sidebar with social links:  Twitter GNU social Facebook Google+ Weibo Tumblr Instagram Flickr 500px Pinterest YouTube Vimeo Vine SlideShare LinkedIn Xing Reddit Hacker News GitHub GitLab Bitbucket Stack Overflow Server Fault Steam MobyGames Last.fm Discogs Keybase  Client-side syntax highlighting by Highlight.js (v9.12.0) Web analytics by Google Analytics Comments by Disqus Icons by Font Awesome (v4.</description>
    </item>
    
    <item>
      <title>Posts</title>
      <link>https://paraofheaven.github.io/post/</link>
      <pubDate>Thu, 24 Aug 2017 16:43:51 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/</guid>
      <description></description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://paraofheaven.github.io/about/</link>
      <pubDate>Thu, 24 Aug 2017 16:08:28 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/about/</guid>
      <description>About me Hi there!
My name is Para Yong, Yong for short.
I am originally from province AnHui but in 2017 I made one of the biggest decisions in my life and came to ShangHai to join a brand new commpany named TongChen Financial bussiness.
Being so far from home was not easy to begin with but life in here has turned out to be better than I could ever have imagined when I made that decision.</description>
    </item>
    
    <item>
      <title>Immutable 详解及React中实践</title>
      <link>https://paraofheaven.github.io/post/immutable%E8%AF%A6%E8%A7%A3%E5%8F%8Areact%E4%B8%AD%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Thu, 08 Dec 2016 21:03:06 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/immutable%E8%AF%A6%E8%A7%A3%E5%8F%8Areact%E4%B8%AD%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;In parahome on 2016-12-08 by para&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Shared mutable state is the root of all evil(共享的可变状态是万恶之源)
&amp;ndash;Pete Hunt&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有人说 Immutable 可以给 React 应用带来数十倍的提升，也有人说 Immutable 的引入是近期 JavaScript 中伟大的发明，因为同期 React 太火，它的光芒被掩盖了。这些至少说明 Immutable 是很有价值的，下面我们来一探究竟。&lt;/p&gt;

&lt;p&gt;JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如
&lt;code&gt;foo ={a:1};bar =foo;bar.a=2&lt;/code&gt; ，你会发现此时&lt;code&gt;foo.a&lt;/code&gt;也被改成了&lt;code&gt;2&lt;/code&gt;。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用shallowCopy(浅拷贝)或deepCopy(深拷贝)来避免被修改，但这样做造成了CPU和内存的浪费。&lt;/p&gt;

&lt;p&gt;Immutable 可以很好地解决这些问题。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React Design Pattern Discuss</title>
      <link>https://paraofheaven.github.io/post/react_desig_pattern_discuss/</link>
      <pubDate>Fri, 11 Nov 2016 21:37:36 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/react_desig_pattern_discuss/</guid>
      <description>&lt;p&gt;In parahome on 2016-11-11 by para&lt;/p&gt;

&lt;h4 id=&#34;transformation&#34;&gt;transformation&lt;/h4&gt;

&lt;p&gt;The core premise for React is that UIs are simply a projection of data into a different form of data. The same input gives the same output. A simple &lt;code&gt;pure function&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>State数据格式设计中的思考</title>
      <link>https://paraofheaven.github.io/post/state%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/</link>
      <pubDate>Wed, 02 Nov 2016 19:20:10 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/state%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E8%AE%BE%E8%AE%A1%E4%B8%AD%E7%9A%84%E6%80%9D%E8%80%83/</guid>
      <description>&lt;p&gt;In parahome on 2016-11-02 by para&lt;/p&gt;

&lt;h4 id=&#34;前言&#34;&gt;前言&lt;/h4&gt;

&lt;p&gt;Redux中，State是整个应用的数据，本质上是一个普通对象。&lt;/p&gt;

&lt;p&gt;State决定了整个应用的组件如何渲染，渲染的结果是什么。可以说，State是应用的灵魂，组件是应用的肉体。&lt;/p&gt;

&lt;p&gt;所以，在项目开发初期，设计一份健壮灵活的State尤其重要，对后续的开发有很大的帮助。（请注意，并不强制要求所有的数据都保存到State中，有些属于组件的数据是完全可以留给组件自身去维护的。）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>React文档中没提到的事</title>
      <link>https://paraofheaven.github.io/post/react%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B2%A1%E6%8F%90%E5%88%B0%E7%9A%84%E4%BA%8B/</link>
      <pubDate>Thu, 20 Oct 2016 21:02:45 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/react%E6%96%87%E6%A1%A3%E4%B8%AD%E6%B2%A1%E6%8F%90%E5%88%B0%E7%9A%84%E4%BA%8B/</guid>
      <description>&lt;p&gt;In parahome on 2016-10-20 by para&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对很多 react 新手来说，网上能找到的资源大都是些简单的 tutorial ，React文档也是非常值得一读的，英文版的有着非常详细的介绍。它们能教会你如何使用 react ，但并不会告诉你怎么在实际项目中优雅的组织和编写 react 代码。用谷歌搜中文“ React 最佳实践”发现前两页几乎全都是同一篇国外文章的译文&amp;hellip;所以我总结了下自己过去那个项目使用 React 踩过的一些坑，也整理了一些别人的观点，希望对部分 react 使用者有帮助。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>笛风新平台前端JavaScript编码规范起草</title>
      <link>https://paraofheaven.github.io/post/%E7%AC%9B%E9%A3%8E%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%89%8D%E7%AB%AFjavascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E8%B5%B7%E8%8D%89/</link>
      <pubDate>Wed, 24 Aug 2016 15:44:02 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E7%AC%9B%E9%A3%8E%E6%96%B0%E5%B9%B3%E5%8F%B0%E5%89%8D%E7%AB%AFjavascript%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E8%B5%B7%E8%8D%89/</guid>
      <description>&lt;h4 id=&#34;编码规范&#34;&gt;编码规范&lt;/h4&gt;

&lt;p&gt;在团队协作过程中，编码规范的作用想必不用多说，本文主要介绍如何选择及相应的辅助工具，最大程度上保证代码质量。&lt;/p&gt;

&lt;h5 id=&#34;选择标准&#34;&gt;选择标准&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;认可度高，该规范现在已经或者即将成为国际 JavaScript 标准了&lt;/li&gt;
&lt;li&gt;支持项目的技术选型&lt;/li&gt;
&lt;li&gt;完备的插件支持&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript语法解析与抽象语法树</title>
      <link>https://paraofheaven.github.io/post/javascript%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</link>
      <pubDate>Fri, 20 May 2016 20:39:57 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/javascript%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E4%B8%8E%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91/</guid>
      <description>&lt;p&gt;In parahome on 2016-05-20 by para&lt;/p&gt;

&lt;p&gt;抽象语法树（Abstract Syntax Tree）也称为AST语法树，指的是源代码语法所对应的树状结构。也就是说，对于一种具体编程语言下的源代码，通过构建语法树的形式将源代码中的语句映射到树中的每一个节点上。&lt;/p&gt;

&lt;h2 id=&#34;什么是语法树&#34;&gt;什么是语法树&lt;/h2&gt;

&lt;p&gt;可以通过一个简单的例子来看语法树具体长什么样子。有如下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var AST = &amp;quot;is Tree&amp;quot;; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JavaScript中的new关键字</title>
      <link>https://paraofheaven.github.io/post/javascript%E4%B8%AD%E7%9A%84new%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Thu, 06 Aug 2015 21:41:42 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/javascript%E4%B8%AD%E7%9A%84new%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>&lt;p&gt;In parahome on 2015-08-06 by para&lt;/p&gt;

&lt;p&gt;Javascript中，实例化一个对象，会用到new关键字。&lt;/p&gt;

&lt;p&gt;经常有人会问我，对于一个函数，什么时候该使用new关键字。&lt;/p&gt;

&lt;p&gt;在回答这个问题之前，需要先了解清楚new的本质，在调用new Function的时候，new做了什么操作。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>关于网页缓存的一些实践</title>
      <link>https://paraofheaven.github.io/post/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Tue, 19 May 2015 22:18:09 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E5%85%B3%E4%BA%8E%E7%BD%91%E9%A1%B5%E7%BC%93%E5%AD%98%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;p&gt;In parahome on 2015-05-19 by para&lt;/p&gt;

&lt;h3 id=&#34;前言&#34;&gt;前言：&lt;/h3&gt;

&lt;p&gt;在8年之前，Yahoo团队曾经对网页中的缓存做了比较详尽的研究，但是随着互联网的高速发展，研究数据发生了一些变化。这篇文章主要是Facebook的web团队对现在缓存情况一些数据收集和研究。包括PC和移动端资源被缓存的时间以及资源在存在的时间。网页缓存是性能优化很重要的因素，值得一读。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用模块化编程库和闭包</title>
      <link>https://paraofheaven.github.io/post/%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E5%BA%93%E5%92%8C%E9%97%AD%E5%8C%85/</link>
      <pubDate>Sat, 11 Apr 2015 22:20:45 +0800</pubDate>
      
      <guid>https://paraofheaven.github.io/post/%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E5%BA%93%E5%92%8C%E9%97%AD%E5%8C%85/</guid>
      <description>&lt;p&gt;In parahome on 2015-04-11 by para&lt;/p&gt;

&lt;p&gt;1 问题及方案&lt;/p&gt;

&lt;p&gt;后台js代码规范度不好，怎么写的都有，不易维护、复用度低，我们不期全部使用backbone做到前端MVC，但使用模块化编程库做到模块化开发还是简单而有意义的。&lt;/p&gt;

&lt;p&gt;2 为什么要模块化&lt;/p&gt;

&lt;p&gt;时至今日，把脚本放在页面的底部，已不再是最佳的解决方案，甚至事与愿违，转化为性能的毒药。出于种种的原因，我们几乎从不直接在页面上插入js脚本，而是使用第三方的加载器，比如seajs或者requirejs。加载模块的概念，如果你是后端开发工程师，更不会陌生。Java、Python、C# 等等语言，都有&lt;strong&gt;include&lt;/strong&gt;、&lt;strong&gt;import&lt;/strong&gt;等功能。JavaScript 语言本身也有类似功能，但目前还处于草案阶段，需要等到ES6 标准得到主流浏览器支持后才能使用。 模块化编程是十分便捷的工程管理工具，简化了代码的结构，让文件的功能变得单一易维护复用度高。更重要的是管理了文件依赖和消除了命名冲突问题，并利用 AMD / CMD 规范统一了格式。如果工具提供了异步加载，还可以避免页面停止渲染被js阻塞。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>